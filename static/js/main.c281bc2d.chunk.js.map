{"version":3,"sources":["WordleContext.js","Game.js","App.js","index.js"],"names":["WordleContext","React","createContext","WordleContextProvider","children","initialHintsState","useState","model","currentWord","setCurrentWord","word","guessWords","setGuessWords","hints","setHints","guessCount","setGuessCount","gameState","setGameState","resetGame","useCallback","getNextGuess","hintBase3","map","number","toString","reduce","prev","curr","hintDecimal","parseInt","moveBucket","bucketToMove","toast","success","position","POSITION","TOP_CENTER","error","console","log","Provider","value","Board","useContext","className","row","length","onClick","Row","props","role","Array","from","letter","column","Tile","handleClick","hintType","newHints","classNames","App","style","textAlign","display","href","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.c281bc2d.chunk.js","sourcesContent":["import React from \"react\";\nimport model from \"./model.json\";\nimport { toast } from \"react-toastify\";\n\nexport const WordleContext = React.createContext();\n\nexport const WordleContextProvider = ({ children }) => {\n  const initialHintsState = [\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],    \n  ];\n  const [currentWord, setCurrentWord] = React.useState(model);\n  const [guessWords, setGuessWords] = React.useState([currentWord.word]);\n  const [hints, setHints] = React.useState(initialHintsState);\n  const [guessCount, setGuessCount] = React.useState(0);\n  const [gameState, setGameState] = React.useState(\"IN_PROGRESS\");\n\n  const resetGame = React.useCallback(() => {\n    setCurrentWord(model);\n    setGuessWords([currentWord.word]);\n    setHints(initialHintsState);\n    setGuessCount(0);\n    setGameState(\"IN_PROGRESS\");\n  }, []);\n\n  const getNextGuess = React.useCallback(() => {\n    const hintBase3 = hints[guessCount]\n      .map((number) => number.toString())\n      .reduce((prev, curr) => prev + curr);\n    const hintDecimal = parseInt(parseInt(hintBase3, 10), 3);\n\n    const moveBucket = currentWord.bucketToMove[hintDecimal];\n\n    if (hintDecimal === 242) {\n      setGameState(\"SUCCESS\");\n      toast.success(\"Wow! That was easy! ðŸŽ‰\", {\n        position: toast.POSITION.TOP_CENTER\n      });\n    } else if (!moveBucket) {\n      setGameState(\"ERROR\");\n      toast.error(\"Word is not in the Dictionary! ðŸš‘\", {\n        position: toast.POSITION.TOP_CENTER\n      });\n      return;\n    } else {\n      setCurrentWord(currentWord.bucketToMove[hintDecimal]);\n      setGuessWords([...guessWords, moveBucket.word]);\n      setGuessCount(guessCount + 1);\n    }\n  }, [guessCount, setGuessCount, currentWord, guessWords, hints]);\n\n  console.log(\"hints: \", hints);\n  return (\n    <WordleContext.Provider\n      value={{\n        currentWord,\n        guessWords,\n        setGuessWords,\n        hints,\n        setHints,\n        getNextGuess,\n        gameState,\n        resetGame\n      }}\n    >\n      {children}\n    </WordleContext.Provider>\n  );\n};\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport { WordleContext } from \"./WordleContext\";\nimport { ToastContainer } from \"react-toastify\";\n\nexport const Board = () => {\n  const { guessWords, getNextGuess, gameState, resetGame } = React.useContext(\n    WordleContext\n  );\n\n  return (\n    <>\n      <div className=\"board-container\">\n        <div className=\"board\">\n          {guessWords.map((word, row) => {\n            console.log(\"length: \", word.length);\n            return <Row row={row} key={word} word={word} />;\n          })}\n          {gameState === \"IN_PROGRESS\" ? (\n            <button className=\"action-button\" onClick={getNextGuess}>ðŸš€ GO</button>\n          ) : (\n            <button className=\"action-button\" onClick={resetGame}>âŽŒ Reset</button>\n          )}\n        </div>\n      </div>\n      <ToastContainer />\n    </>\n  );\n};\n\nexport const Row = (props) => {\n  const { word, row } = props;\n\n  return (\n    <div role=\"menu\" className=\"row\">\n      {Array.from(word).map((letter, column) => (\n        <Tile\n          key={column}\n          row={row}\n          column={column}\n          data-value={letter}\n          letter={letter}\n        />\n      ))}\n    </div>\n  );\n};\n\nconst getNextHintType = (hintType) => {\n  if (hintType === 0) {\n    return 1;\n  } else if (hintType === 1) {\n    return 2;\n  }\n  return 0;\n};\n\nexport const Tile = ({ letter, row, column, ...props }) => {\n  const { hints, setHints } = React.useContext(WordleContext);\n\n  const handleClick = React.useCallback(() => {\n    const newHints = [...hints];\n    newHints[row][column] = getNextHintType(newHints[row][column]);\n    setHints(newHints);\n  }, [row, column, hints, setHints]);\n\n  return (\n    <span\n      className={classNames(\"tile\", {\n        \"tile--exact\": hints[row][column] === 2,\n        \"tile--close\": hints[row][column] === 1,\n        \"tile--miss\": hints[row][column] === 0\n      })}\n      data-value={letter}\n      {...props}\n      onClick={handleClick}\n    >\n      {letter}\n    </span>\n  );\n};\n","import React from \"react\";\nimport { WordleContextProvider } from \"./WordleContext\";\nimport { Board } from \"./Game\";\n\nimport \"./styles.scss\";\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport default function App() {\n  return (\n    <>\n      <div className=\"App\">\n        <h1>WORDLE GENIE</h1>\n        <div style={{ textAlign: \"center\" }}>\n          <div style={{ display: \"inline-block\", textAlign: \"left\" }}>\n            <h4>1. Enter the word suggested here in the <a href=\"https://www.powerlanguage.co.uk/wordle/\">Wordle</a> App.</h4>\n            <h4>2. Tap the tiles to update the hints, as received from Wordle.</h4>\n            <h4>3. Hit ðŸš€ GO to get the next word suggestion.</h4>\n          </div>\n      </div>\n        <WordleContextProvider>\n          <Board />\n        </WordleContextProvider>\n      </div>\n      <footer className=\"footer\">\n        <div>\n          Built with ðŸ’™ by&nbsp;\n          <a href=\"https://github.com/akhilpanchal\">Akhil Panchal</a>&nbsp;and&nbsp;\n          <a href=\"https://github.com/infinitymittal\">Anant Mittal</a>.&nbsp;\n        </div>\n        <br />\n      </footer>\n    </>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}