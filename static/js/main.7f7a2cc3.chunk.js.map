{"version":3,"sources":["WordleContext.js","Game.js","App.js","index.js"],"names":["WordleContext","React","createContext","BASE_MAP","exact","close","miss","WordleContextProvider","children","useState","model","currentWord","setCurrentWord","word","guessWords","setGuessWords","hints","setHints","guessCount","setGuessCount","getNextGuess","useCallback","hintBase3","map","number","toString","reduce","prev","curr","hintDecimal","parseInt","moveBucket","bucketToMove","console","log","Provider","value","Board","useContext","className","row","length","onClick","Row","props","role","Array","from","letter","column","Tile","visible","setVisible","toggle","handleClick","interactive","placement","content","classNames","LetterHint","event","newHints","target","getAttribute","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.7f7a2cc3.chunk.js","sourcesContent":["import React from \"react\";\nimport model from \"./model.json\";\n\nexport const WordleContext = React.createContext();\n\nexport const BASE_MAP = {\n  exact: 2,\n  close: 1,\n  miss: 0\n};\n\nexport const WordleContextProvider = ({ children }) => {\n  const [currentWord, setCurrentWord] = React.useState(model);\n  const [guessWords, setGuessWords] = React.useState([currentWord.word]);\n  const [hints, setHints] = React.useState([\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0]\n  ]);\n\n  const [guessCount, setGuessCount] = React.useState(0);\n\n  const getNextGuess = React.useCallback(() => {\n    const hintBase3 = hints[guessCount]\n      .map((number) => number.toString())\n      .reduce((prev, curr) => prev + curr);\n    const hintDecimal = parseInt(parseInt(hintBase3, 10), 3);\n\n    const moveBucket = currentWord.bucketToMove[hintDecimal];\n\n    if (!moveBucket || hintDecimal === 242) {\n      console.log(\"exit\");\n      return;\n    } else {\n      setCurrentWord(currentWord.bucketToMove[hintDecimal]);\n      setGuessWords([...guessWords, moveBucket.word]);\n      setGuessCount(guessCount + 1);\n    }\n  }, [guessCount, setGuessCount, currentWord, guessWords, hints]);\n\n  console.log(\"hints: \", hints);\n  return (\n    <WordleContext.Provider\n      value={{\n        currentWord,\n        guessWords,\n        setGuessWords,\n        hints,\n        setHints,\n        getNextGuess\n      }}\n    >\n      {children}\n    </WordleContext.Provider>\n  );\n};\n","import React from \"react\";\nimport Tippy from \"@tippyjs/react\";\nimport classNames from \"classnames\";\nimport { BASE_MAP, WordleContext } from \"./WordleContext\";\n\nexport const Board = () => {\n  const { guessWords, setGuessWords, getNextGuess } = React.useContext(\n    WordleContext\n  );\n\n  return (\n    <div className=\"board-container\">\n      <div className=\"board\">\n        {guessWords.map((word, row) => {\n          console.log(\"length: \", word.length);\n          return <Row row={row} key={word} word={word} />;\n        })}\n        <button onClick={getNextGuess}>Go!</button>\n      </div>\n    </div>\n  );\n};\n\nexport const Row = (props) => {\n  const { word, row } = props;\n\n  return (\n    <div role=\"menu\" className=\"row\">\n      {Array.from(word).map((letter, column) => (\n        <>\n          <Tile row={row} column={column} data-value={letter} letter={letter} />\n        </>\n      ))}\n    </div>\n  );\n};\n\nexport const Tile = ({ letter, row, column, ...props }) => {\n  const { hints } = React.useContext(WordleContext);\n\n  const [visible, setVisible] = React.useState(false);\n\n  const toggle = React.useCallback(() => setVisible(!visible), [visible]);\n\n  const handleClick = React.useCallback(() => {\n    toggle();\n  }, [toggle]);\n\n  return (\n    <Tippy\n      interactive\n      visible={visible}\n      placement=\"bottom\"\n      content={\n        <LetterHint\n          visible\n          setVisible={setVisible}\n          letter={letter}\n          row={row}\n          column={column}\n        />\n      }\n    >\n      <span\n        className={classNames(\"tile\", {\n          \"tile--exact\": hints[row][column] === 2,\n          \"tile--close\": hints[row][column] === 1,\n          \"tile--miss\": hints[row][column] === 0\n        })}\n        data-value={letter}\n        {...props}\n        onClick={handleClick}\n      >\n        {letter !== \"*\" ? letter : null}\n      </span>\n    </Tippy>\n  );\n};\n\nconst LetterHint = ({ letter, row, column, visible, setVisible }) => {\n  const { hints, setHints } = React.useContext(WordleContext);\n\n  const handleClick = React.useCallback(\n    (event) => {\n      const newHints = [...hints];\n      newHints[row][column] = BASE_MAP[event.target.getAttribute(\"data-value\")];\n\n      // BASE_MAP[event.target.getAttribute(\"data-value\")].toString();\n\n      console.log(\"newHints: \", newHints);\n      console.log(\"data-value: \", event.target.getAttribute(\"data-value\"));\n      console.log(\"row: \", row);\n      console.log(\"column: \", column);\n\n      setHints(newHints);\n      setVisible(false);\n    },\n    [hints, setHints, setVisible, row, column]\n  );\n\n  return (\n    <span onClick={handleClick}>\n      <span data-value=\"close\" role=\"button\" className=\"hint hint--yellow\" />\n      <span data-value=\"exact\" role=\"button\" className=\"hint hint--green\" />\n      <span data-value=\"miss\" role=\"button\" className=\"hint\" />\n    </span>\n  );\n};\n","import React from \"react\";\nimport { WordleContextProvider } from \"./WordleContext\";\nimport { Board } from \"./Game\";\n\nimport \"./styles.scss\";\nimport \"tippy.js/dist/tippy.css\";\n// import \"tippy.js/themes/light.css\";\n// import \"tippy.js/themes/light-border.css\";\n// import \"tippy.js/themes/material.css\";\nimport \"tippy.js/themes/translucent.css\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>WORDLE SOLVER</h1>\n      <h4>1. Enter the word suggested here in the game</h4>\n      <h4>2. Give the hints by hovering over the letters</h4>\n      <h4>3. Click Go! to get the next word suggestion</h4>\n      <WordleContextProvider>\n        <Board />\n      </WordleContextProvider>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}